settings
{
	main
	{
		Description: "The classic playground game, in terms of Lucio wallriding.  (By nobody#1774.)"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max FFA Players: 6
		Max Spectators: 12
		Return To Lobby: Never
	}

	modes
	{
		Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 50

			enabled maps
			{
				Castillo
				Necropolis
				Workshop Chamber
			}
		}

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn As Random Hero: On
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			Primary Fire: Off
			Quick Melee: Off
			Ultimate Ability: Off

			Lúcio
			{
				Primary Fire: Off
				Quick Melee: Off
				Soundwave: Off
				Ultimate Ability Sound Barrier: Off
			}

			enabled heroes
			{
				Lúcio
			}
		}
	}
}

variables
{
	global:
		0: VECTORS_EFFECTS_Checkpoints
		1: PLAYER_It
		2: BOOL_It_Started
		3: PLAYERS_All
		4: BOOL_It_Fell
		5: INT_Checkpoints_Completed
		6: VECTOR_Temp
		7: PLAYER_Follower
		8: PLAYERS_Tried_This_Round
		9: REAL_Checkpoint_Radius
		10: EFFECT_Current_Checkpoint
		11: BOOL_Follower_Started
		12: BOOL_Follower_Fell
		13: BOOL_It_Ready
		14: BOOL_Follower_Ready
		15: REAL_Time_Remaining
		16: REAL_Time_Limit
		18: REAL_Checkpoint_Radius_Factor
		19: EFFECT_Follower
		20: REAL_Checkpoint_Min_Separation

	player:
		0: INT_Times_It
}

subroutines
{
	0: ROUND_Next
	1: CHECKPOINT_Record
	2: TURN_Next
	3: TURN_End
}

disabled rule("CREDITS: Thanks to \"OGGamerTag\", \"Pheonix050\", \"DPSFrog\", and \"ZRizzT\" for playtesting.")
{
	event
	{
		Ongoing - Global;
	}
}

rule("DEBUG: Next round")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Call Subroutine(ROUND_Next);
	}
}

rule("INIT")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.REAL_Checkpoint_Radius = 1;
		Global.REAL_Checkpoint_Radius_Factor = 1.500;
		Global.REAL_Time_Limit = 5;
		Global.REAL_Checkpoint_Min_Separation = 2;
		Create HUD Text(Global.PLAYERS_All, Custom String("BEGIN TURN"), Custom String("When it's your turn"), Custom String("Press: {0}",
			Input Binding String(Button(Interact))), Right, 0, White, Turquoise, White, Visible To and String, Default Visibility);
		Create HUD Text(Global.PLAYERS_All, Custom String("CHECKPOINTS"), Custom String("Completed"), String("{0} / {1}",
			Global.INT_Checkpoints_Completed, Count Of(Global.VECTORS_EFFECTS_Checkpoints)), Left, 0, White, Turquoise, White,
			Visible To and String, Default Visibility);
		Disable Built-In Game Mode Scoring;
		Create HUD Text(Global.PLAYERS_All, Custom String("IT"), Custom String("Lays out course"), Global.PLAYER_It, Left, 0, White,
			Turquoise, White, Visible To and String, Default Visibility);
		Create HUD Text(Global.PLAYERS_All, Custom String("FOLLOWER"), Custom String("Follows course"), Global.PLAYER_Follower, Left, 0,
			White, Turquoise, White, Visible To and String, Default Visibility);
	}
}

rule("PLAYER: Joins")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		"Update list of players."
		Global.PLAYERS_All = All Players(All Teams);
		Event Player.INT_Times_It = 0;
		Start Forcing Player Outlines(Event Player, Global.PLAYERS_All, True, Green);
		Set Status(Event Player, Null, Phased Out, 9999);
	}
}

rule("PLAYER: Leaves")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		"Player who left was it: start new round."
		If(!Entity Exists(Global.PLAYER_It));
			Small Message(All Players(All Teams), Custom String("\"It\" left.  Next round..."));
			Call Subroutine(ROUND_Next);
		Else If(Global.PLAYER_Follower != Null && !Entity Exists(Global.PLAYER_Follower));
			Call Subroutine(TURN_Next);
		End;
	}
}

rule("GLOBAL: Game begins")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Game In Progress == True || Current Game Mode == Game Mode(Skirmish)) == True;
		Count Of(All Players(All Teams)) > 0;
	}

	actions
	{
		Call Subroutine(ROUND_Next);
	}
}

rule("PLAYER: \"It\" attaches for first time, beginning turn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_It;
		Global.BOOL_It_Started == False;
		Global.BOOL_It_Ready == True;
		Is On Wall(Event Player) == True;
	}

	actions
	{
		Global.BOOL_It_Started = True;
		Global.REAL_Time_Remaining = Global.REAL_Time_Limit;
		Chase Global Variable At Rate(REAL_Time_Remaining, 0, 1, Destination and Rate);
	}
}

rule("PLAYER: \"It\" attached to wall")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_It;
		Global.BOOL_It_Fell == False;
		Global.BOOL_It_Started == True;
		Is On Wall(Event Player) == True;
	}

	actions
	{
		Call Subroutine(CHECKPOINT_Record);
	}
}

rule("PLAYER: \"It\" detached from wall")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_It;
		Global.BOOL_It_Fell == False;
		Global.BOOL_It_Started == True;
		Is On Wall(Event Player) == False;
	}

	actions
	{
		Call Subroutine(CHECKPOINT_Record);
	}
}

rule("PLAYER: \"It\" fell")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_It;
		Global.BOOL_It_Fell == False;
		Global.BOOL_It_Started == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Global.BOOL_It_Fell = True;
		Big Message(All Players(All Teams), Custom String("{0}'s run finished", Event Player));
		Call Subroutine(TURN_Next);
	}
}

rule("SUBR: ROUND_Next")
{
	event
	{
		Subroutine;
		ROUND_Next;
	}

	actions
	{
		"Initialize variables."
		Global.VECTORS_EFFECTS_Checkpoints = Empty Array;
		Global.PLAYER_Follower = Null;
		Global.PLAYERS_Tried_This_Round = Empty Array;
		Global.INT_Checkpoints_Completed = 0;
		Global.BOOL_It_Ready = False;
		Global.BOOL_It_Started = False;
		Global.BOOL_It_Fell = False;
		Global.REAL_Time_Remaining = Global.REAL_Time_Limit;
		"Choose new \"it\"."
		Global.PLAYER_It = First Of(Sorted Array(All Players(All Teams), Current Array Element.INT_Times_It));
		"Increment that player's times-it counter."
		Global.PLAYER_It.INT_Times_It += 1;
		"Avoid race condition."
		Wait(0.250, Ignore Condition);
		"Announce."
		Big Message(All Players(All Teams), Custom String("{0} is it", Global.PLAYER_It));
		Small Message(Global.PLAYER_It, Custom String("You're it!  Press {0} when ready, then start wallriding.", Input Binding String(
			Button(Interact))));
		Set Objective Description(Global.PLAYER_It, Custom String("You're it!  Wallride a path for others to follow."),
			Visible To and String);
		Set Objective Description(Filtered Array(All Players(All Teams), Current Array Element != Global.PLAYER_It), Custom String(
			"Wait for {0} to set a path for you to follow.", Global.PLAYER_It), Visible To and String);
		Create Effect(Global.PLAYERS_All, Bad Aura, Green, Global.PLAYER_It, 0.500, Visible To Position and Radius);
	}
}

rule("SUBR: CHECKPOINT_Record")
{
	event
	{
		Subroutine;
		CHECKPOINT_Record;
	}

	actions
	{
		"Save position in a variable to ensure that the position of the effect and the recorded vector are the same."
		Global.VECTOR_Temp = Eye Position(Event Player);
		Abort If(Global.VECTORS_EFFECTS_Checkpoints != Empty Array && Distance Between(Global.VECTOR_Temp, First Of(Last Of(
			Global.VECTORS_EFFECTS_Checkpoints))) <= Global.REAL_Checkpoint_Min_Separation);
		Global.INT_Checkpoints_Completed += 1;
		Create Effect(Global.PLAYERS_All, Sphere, Green, Global.VECTOR_Temp, Global.REAL_Checkpoint_Radius, Visible To);
		Global.VECTORS_EFFECTS_Checkpoints[Count Of(Global.VECTORS_EFFECTS_Checkpoints)] = Array(Global.VECTOR_Temp, Last Created Entity);
		Create In-World Text(Global.PLAYERS_All, Global.INT_Checkpoints_Completed, Global.VECTOR_Temp, 1, Do Not Clip, Visible To, White,
			Default Visibility);
	}
}

rule("SUBR: TURN_Next")
{
	event
	{
		Subroutine;
		TURN_Next;
	}

	actions
	{
		"Initialize vars."
		Global.BOOL_Follower_Fell = False;
		Global.BOOL_Follower_Ready = False;
		Global.BOOL_Follower_Started = False;
		Global.INT_Checkpoints_Completed = 0;
		"Choose new follower."
		Global.PLAYER_Follower = Random Value In Array(Filtered Array(All Players(All Teams), !(
			Current Array Element == Global.PLAYER_It || Array Contains(Global.PLAYERS_Tried_This_Round, Current Array Element))));
		"Next follower's turn."
		If(Global.PLAYER_Follower != Null);
			"Add to list of followers this round."
			Modify Global Variable(PLAYERS_Tried_This_Round, Append To Array, Global.PLAYER_Follower);
			"Avoid race condition."
			Wait(0.250, Ignore Condition);
			"Reset current-checkpoint effect."
			Destroy Effect(Global.EFFECT_Current_Checkpoint);
			Create Effect(Global.PLAYERS_All, Sphere, Orange, Global.VECTORS_EFFECTS_Checkpoints[Global.INT_Checkpoints_Completed][0],
				Global.REAL_Checkpoint_Radius / 2, Visible To Position and Radius);
			Global.EFFECT_Current_Checkpoint = Last Created Entity;
			"Announce."
			Big Message(All Players(All Teams), Custom String("{0}'s turn to follow {1}'s path", Global.PLAYER_Follower, Global.PLAYER_It));
			Small Message(Global.PLAYER_Follower, Custom String("Your turn!  Press {0} when ready, then follow {1}'s path.",
				Input Binding String(Button(Interact)), Global.PLAYER_It));
			Set Objective Description(Global.PLAYER_Follower, Custom String("Your turn!  Follow {0}'s path", Global.PLAYER_It),
				Visible To and String);
			Set Objective Description(Filtered Array(All Players(All Teams), Current Array Element != Global.PLAYER_Follower), Custom String(
				"Wait for {0} to follow {1}'s path", Global.PLAYER_It), Visible To and String);
			Destroy Effect(Global.EFFECT_Follower);
			Create Effect(Global.PLAYERS_All, Good Aura, Green, Global.PLAYER_Follower, 0.500, Visible To Position and Radius);
			Global.EFFECT_Follower = Last Created Entity;
		"No more followers.  Next round."
		Else;
			Call Subroutine(ROUND_Next);
		End;
	}
}

rule("PLAYER: Follower begins turn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_Follower;
		Global.BOOL_Follower_Started == False;
		Global.BOOL_Follower_Ready == True;
		Is On Wall(Event Player) == True;
	}

	actions
	{
		Global.BOOL_Follower_Started = True;
		Small Message(All Players(All Teams), Custom String("{0} began following {1}'s path", Event Player, Global.PLAYER_It));
	}
}

rule("PLAYER: Follower hits checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_Follower;
		Global.BOOL_Follower_Started == True;
		Global.BOOL_Follower_Fell == False;
		Distance Between(Eye Position(Event Player), Global.VECTORS_EFFECTS_Checkpoints[Global.INT_Checkpoints_Completed][0])
			<= Global.REAL_Checkpoint_Radius * Global.REAL_Checkpoint_Radius_Factor;
	}

	actions
	{
		Global.INT_Checkpoints_Completed += 1;
		Play Effect(All Players(All Teams), Good Explosion, Green, Event Player, 2);
		Play Effect(All Players(All Teams), Buff Explosion Sound, White, Event Player, 5);
		If(Global.INT_Checkpoints_Completed == Count Of(Global.VECTORS_EFFECTS_Checkpoints));
			Call Subroutine(TURN_End);
		End;
	}
}

rule("PLAYER: Follower fell")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_Follower;
		Global.BOOL_Follower_Fell == False;
		Global.BOOL_Follower_Started == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Global.BOOL_Follower_Fell = True;
		Call Subroutine(TURN_End);
	}
}

rule("PLAYER: \"It\" declares ready")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_It;
		Global.BOOL_It_Started == False;
		Global.BOOL_It_Ready == False;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} is ready to set a new path", Event Player));
		Global.BOOL_It_Ready = True;
		Destroy All Effects;
		Destroy All In-World Text;
	}
}

rule("PLAYER: Follower declares ready")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Global.PLAYER_Follower;
		Global.BOOL_Follower_Started == False;
		Global.BOOL_Follower_Ready == False;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} is ready to follow {1}'s path", Event Player, Global.PLAYER_It));
		Global.BOOL_Follower_Ready = True;
	}
}

rule("PLAYER: \"It\" ran out of time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.BOOL_It_Started == True;
		Global.REAL_Time_Remaining == 0;
		Global.BOOL_It_Fell == False;
	}

	actions
	{
		Global.BOOL_It_Fell = True;
		Big Message(All Players(All Teams), Custom String("{0}'s run finished", Global.PLAYER_It));
		Small Message(Global.PLAYER_It, Custom String("Time's up!"));
		Call Subroutine(TURN_Next);
	}
}

rule("SUBR: TURN_End")
{
	event
	{
		Subroutine;
		TURN_End;
	}

	actions
	{
		Global.BOOL_Follower_Started = False;
		Modify Player Score(Global.PLAYER_It, Count Of(Global.VECTORS_EFFECTS_Checkpoints) - Global.INT_Checkpoints_Completed);
		Wait(0.250, Ignore Condition);
		If(Global.INT_Checkpoints_Completed == Count Of(Global.VECTORS_EFFECTS_Checkpoints));
			Big Message(All Players(All Teams), Custom String("{0} hit all checkpoints", Event Player));
		Else;
			Big Message(All Players(All Teams), Custom String("{0} hit {1} of {2} checkpoints", Event Player, Global.INT_Checkpoints_Completed,
				Count Of(Global.VECTORS_EFFECTS_Checkpoints)));
		End;
		Wait(0.250, Ignore Condition);
		Call Subroutine(TURN_Next);
	}
}
