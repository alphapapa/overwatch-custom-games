settings
{
	lobby
	{
		Max Spectators: 12
		Return To Lobby: Never
	}

	modes
	{
		disabled Deathmatch
		{
			Game Length In Minutes: 5
			Score To Win: 50
			Self Initiated Respawn: Off
		}

		Skirmish
		{
			disabled maps
			{
				Blizzard World Winter
				Eichenwalde Halloween
				Hanamura Winter
				Hollywood Halloween
				King's Row Winter
				Lijiang Tower Lunar New Year
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Island
				Workshop Island Night
			}
		}

		General
		{
			Game Mode Start: Immediately
		}
	}

	heroes
	{
		General
		{
			disabled heroes
			{
				Echo
				Sigma
			}
		}
	}
}

rule("camera settings - s,0 = distance ,, s1 = vertical aim multiplier ,, S,2,3,4 = Offset x,y,z")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.S[0] = 2;
		Event Player.S[1] = 1;
		Event Player.S[2] = -0.500;
		Event Player.S[3] = 0.500;
		Event Player.S[4] = -1;
	}
}

rule("toggle third person camera with ctrl + interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Interact);
		Stop Holding Button(Event Player, Crouch);
		Event Player.T[0] = Event Player.T[0] + 1;
		Skip If(Event Player.T[0] <= 2, 2);
		Event Player.T[0] = 0;
		Small Message(All Players(All Teams), String("Off"));
		Skip If(Event Player.T[0] != 1, 1);
		Small Message(All Players(All Teams), String("On"));
		Skip If(Event Player.T[0] != 2, 1);
		Small Message(All Players(All Teams), String("{0}: {1}", String("Optimal"), String("On")));
	}
}

rule("T(0) == 1: Enable standard 3p-cam with collision detection. - camera code by Mornedil#2772")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.T[0] == 1;
	}

	actions
	{
		Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + World Vector Of(Vector(Event Player.S[2], Event Player.S[3], Event Player.S[4]), Event Player,
			Rotation) + Facing Direction Of(Event Player) * Vector(Event Player.S[0], Event Player.S[0] * Event Player.S[1],
			Event Player.S[0]) * -1, All Players(All Teams), Event Player, True), Eye Position(Event Player) + World Vector Of(Vector(
			Event Player.S[2], Event Player.S[3], Event Player.S[4]), Event Player, Rotation) + Facing Direction Of(Event Player) * 500,
			50);
	}
}

rule("T(0) == 2:  Enable 3P-cam, \"true target\" mode - aims perfectly where you look at - camera code by Mornedil#2772")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.T[0] == 2;
	}

	actions
	{
		Start Camera(Event Player, Facing Direction Of(Event Player) * 0.200 + Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + World Vector Of(Vector(Event Player.S[2], Event Player.S[3], Event Player.S[4]), Event Player,
			Rotation) + Facing Direction Of(Event Player) * Vector(Event Player.S[0], Event Player.S[0] * Event Player.S[1],
			Event Player.S[0]) * -1, All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + Facing Direction Of(Event Player) * 500, All Players(All Teams), Event Player, True), 20);
	}
}

rule("T(0) == false - disable third person camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.T[0] == False;
	}

	actions
	{
		Stop Camera(Event Player);
	}
}

rule("___ below are copies of the settings rule with different values. you can delete this rule and all rules below")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == False;
		Event Player.T[0] != 0;
	}

	actions
	{
		Event Player.S[5] = Event Player.S[5] + 1;
		Skip If(Event Player.S[5] <= 5, 1);
		Event Player.S[5] = 0;
		Small Message(All Players(All Teams), String("{0}: {1}", String("Current"), Event Player.S[5]));
		Stop Holding Button(Event Player, Interact);
	}
}

rule("preset 1: standard camera with a slight offset to the right and up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 0;
	}

	actions
	{
		Event Player.S[0] = 2;
		Event Player.S[1] = 1;
		Event Player.S[2] = -0.500;
		Event Player.S[3] = 0.500;
		Event Player.S[4] = -1;
	}
}

rule("preset 2: standard camera with offset, but limited vertical movement")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 1;
	}

	actions
	{
		Event Player.S[0] = 1;
		Event Player.S[1] = 0.500;
		Event Player.S[2] = -0.500;
		Event Player.S[3] = 0.500;
		Event Player.S[4] = -1;
	}
}

rule("preset 3: no offset, which puts crosshair where the player is aiming")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 2;
	}

	actions
	{
		Event Player.S[0] = 2;
		Event Player.S[1] = 1;
		Event Player.S[2] = 0;
		Event Player.S[3] = 0;
		Event Player.S[4] = 0;
	}
}

rule("preset 4: only vertical offset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 3;
	}

	actions
	{
		Event Player.S[0] = 2;
		Event Player.S[1] = 1;
		Event Player.S[2] = 0;
		Event Player.S[3] = 0.750;
		Event Player.S[4] = 0;
	}
}

rule("preset 5: shoulder view")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 4;
	}

	actions
	{
		Event Player.S[0] = 1;
		Event Player.S[1] = 1;
		Event Player.S[2] = -0.700;
		Event Player.S[3] = 0.300;
		Event Player.S[4] = -0.500;
	}
}

rule("preset 6: tank shoulder view")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.S[5] == 5;
	}

	actions
	{
		Event Player.S[0] = 1.300;
		Event Player.S[1] = 1;
		Event Player.S[2] = -0.900;
		Event Player.S[3] = 0.600;
		Event Player.S[4] = -0.500;
	}
}
